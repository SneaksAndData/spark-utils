name: Release a new version

on: workflow_dispatch
jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Create Release
        env:
          MAJOR_V: "0"
          MINOR_V: "5"
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -e
          providedMajor=$MAJOR_V
          providedMinor=$MINOR_V
          currentVersion=$(git describe --tags --abbrev=7)
          currentMinor=$(echo $currentVersion | cut -d. -f2)
          currentMajor=$(echo $currentVersion | cut -d. -f1 | cut -dv -f2)
          if [[ $currentMajor -eq $providedMajor ]] && [[ $providedMinor -eq $currentMinor ]];
          then
            currentRevision=$(echo $(echo $currentVersion | rev | cut -d. -f1) | rev | cut -d- -f1)
            nextRevision=$(( currentRevision + 1 ))
          else
            nextRevision='0'
          fi
          nextVersion="v$providedMajor.$providedMinor.$nextRevision"
          gh release create $nextVersion --generate-notes

  release_to_pypi:
    name: Release distribution to test.pypi.org
    runs-on: ubuntu-latest
    #needs: [ create_release ]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8.x'
          architecture: 'x64'
      - name: Install Poetry and prepare version
        run: |
          set -e
          
          curl -sSL https://install.python-poetry.org | python3 - --preview
          
          version=$(git describe --tags --abbrev=7)
          sed -i "s/version = \"0.0.0\"/version = \"${version:1}\"/" pyproject.toml
          echo "__version__ = '${version:1}'" > ./spark_utils/_version.py

      - name: Configure Test PyPi
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          PYPI_TEST_TOKEN: ${{ secrets.PYPI_TEST_API_TOKEN }}
        run: |
          set -e
                  
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi $PYPI_TEST_TOKEN

      - name: Publish distribution ðŸ“¦ to test PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          set -e
                  
          poetry build && poetry publish -r test-pypi

      - name: Publish distribution ðŸ“¦ to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags') }}
        run: |
          set -e
          
          poetry build && poetry publish
