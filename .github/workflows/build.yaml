name: Validate code

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate_code:
    name: Validate code in spark container
    runs-on: ubuntu-latest
    container:
      image: esdcrproduction.azurecr.io/spark:v1.3.2-bitnami-3.2.0-python-3.9.7-0
      credentials:
        username: ${{ secrets.AZCR_PROD_USER }}
        password: ${{ secrets.AZCR_PROD_TOKEN }}
      options: -u root -w /opt/bitnami/spark --mount type=tmpfs,destination=/home/spark

    steps:
      - uses: actions/checkout@v2
      - name: Prepare venv
        run: |
          set -e
          
          python -m virtualenv venv
          . venv/bin/activate
          pip install -r ./requirements.txt
          pip install -r ./requirements-dev.txt
      - name: Lint
        run: |
          set -e
          
          pypath=$(pwd)
          export PYTHONPATH="$pypath/src:$PYTHONPATH"
          
          . venv/bin/activate
          find ./src/spark_utils -type f -name "*.py" | xargs pylint
      - name: Unit test
        run: |
          set -e
          
          pypath=$(pwd)
          export PYTHONPATH="$pypath/src:$PYTHONPATH"
          
          . venv/bin/activate
          pytest ./test

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ validate_code ]
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow
      - name: Create Release
        env:
          MAJOR_V: "0"
          MINOR_V: "5"
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -e
          providedMajor=$MAJOR_V
          providedMinor=$MINOR_V
          currentVersion=$(git describe --tags --abbrev=7)
          currentMinor=$(echo $currentVersion | cut -d. -f2)
          currentMajor=$(echo $currentVersion | cut -d. -f1 | cut -dv -f2)
          if [[ $currentMajor -eq $providedMajor ]] && [[ $providedMinor -eq $currentMinor ]];
          then
            currentRevision=$(echo $(echo $currentVersion | rev | cut -d. -f1) | rev | cut -d- -f1)
            nextRevision=$(( currentRevision + 1 ))
          else
            nextRevision='0'
          fi
          nextVersion="v$providedMajor.$providedMinor.$nextRevision"
          gh release create $nextVersion --generate-notes

  release_to_pypi_test:
    name: Release distribution to test.pypi.org
    runs-on: ubuntu-latest
    needs: [ create_release ]

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8.x'
      - name: Build wheel
        run: |
          set -e
          
          version=$(git describe --tags --abbrev=7)
          
          pip install virtualenv
          python -m virtualenv venv
          
          . venv/bin/activate
          pip install --upgrade twine build
          
          echo "__version__ = '$version'" > ./src/spark_utils/_version.py
          
          python -m build --sdist --wheel
      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_TEST_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
